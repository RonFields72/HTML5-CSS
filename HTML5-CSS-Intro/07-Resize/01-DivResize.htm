<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <style type="text/css">
    div.resize
    {
      width: 20em;
      height: 20em;
      border: 0.1em solid;
      resize: both;
      overflow: auto;
    }
  </style>
</head>
<body>
<h2>Use Google Chrome or FireFox for this demo</h2>
  <div class="resize">
    <p>
      As technology keeps moving on, we as developers are continually challenged to learn
      new ways of doing our jobs. Many years ago (starting as far back as Visual Basic
      4.0) the movement was toward OOP and creating N-Tier applications. This meant wrapping
      up the data returned from DAO, RDO or ADO into classes and collections of classes.
      .NET came along and we started using ADO.NET to retrieve data. However, usage of
      classes and collection classes changed very little, at least conceptually. In .NET
      2.0 Generics were introduced, but this just helped simplify our code. Again, our
      basic class structure changed very little.</p>
    <p>
      If you were a normal desktop developer (Windows Forms) or an ASP.NET developer you
      were able to simply connect to your database, retrieve your data, and life was good.
      However, as more devices have exploded into our world, we are forced to learn new
      ways to consume our data. Most prevalent is the use of web services or Service Oriented
      Architecture (SOA). Luckily, web services can be consumed from desktop apps, web
      apps, and mobile apps. If you are doing desktop apps and web apps, you can most
      likely consume these services using a synchronous model. If you are using Silverlight,
      HTML5 with JS or other mobile applications, you will have to use an asynchronous
      model. Moving from synchronous to asynchronous is not too difficult; it just takes
      a little different style of programming.</p>
  </div>
</body>
</html>
